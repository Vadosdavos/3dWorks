{"version":3,"sources":["components/Controls/Controls.module.css","assets/models/skate.glb","store/slices/colorSlice.ts","components/Controls/Controls.tsx","components/Skate/Skate.tsx","components/Scene.tsx","App.tsx","reportWebVitals.js","store/store.ts","index.tsx"],"names":["module","exports","controlsContainer","colorsContainer","colorItem","__webpack_require__","p","colorSlice","createSlice","name","initialState","bgColor","deckColor","reducers","changeBgColor","state","action","payload","changeDeckColor","actions","Controls","_useState","useState","_useState2","Object","slicedToArray","bgColorValue","setBgColorValue","dispatch","useDispatch","handleDeckColorClick","event","target","id","react_default","a","createElement","className","styles","type","value","onInput","map","el","key","style","backgroundColor","onClick","ROTATE_Y_90","Math","PI","Skate","_ref","hovered","setHovered","skate","useLoader","GLTFLoader","skateModel","model","useRef","scene","newColor","THREE","color","shininess","deck","nodes","useEffect","material","document","body","cursor","ref","object","scale","rotation","onPointerOver","onPointerOut","extend","OrbitControls","Scene","_useThree","useThree","camera","domElement","gl","position","y","lookAt","background","Fragment","args","maxDistance","minDistance","intensity","Skate_Skate","App","useSelector","colors","Controls_Controls","react_three_fiber_esm","Scene_Scene","href","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","colorReducer","ReactDOM","createRoot","getElementById","render","es","App_App"],"mappings":"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","file":"static/js/main.d060f709.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"Controls_controlsContainer__3Ognb\",\"colorsContainer\":\"Controls_colorsContainer__1KBcD\",\"colorItem\":\"Controls_colorItem__3wuFM\"};","module.exports = __webpack_public_path__ + \"static/media/skate.72b3bd60.glb\";","import { createSlice } from '@reduxjs/toolkit'\r\nimport type { PayloadAction } from '@reduxjs/toolkit'\r\n\r\nexport interface colorState {\r\n  bgColor?: string,\r\n  deckColor: string\r\n}\r\n\r\nconst initialState: colorState = {\r\n  bgColor: 'white',\r\n  deckColor: '',\r\n}\r\n\r\nexport const colorSlice = createSlice({\r\n  name: 'color',\r\n  initialState,\r\n  reducers: {\r\n    changeBgColor: (state, action: PayloadAction<string>) => {\r\n      state.bgColor = action.payload\r\n    },\r\n    changeDeckColor: (state, action: PayloadAction<string>) => {\r\n      state.deckColor = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { changeBgColor, changeDeckColor } = colorSlice.actions\r\n\r\nexport default colorSlice.reducer","import React, { SyntheticEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeBgColor, changeDeckColor } from '../../store/slices/colorSlice';\r\nimport styles from './Controls.module.css';\r\n\r\nexport const Controls = () => {\r\n  const colors = ['red', 'white', 'blue', 'green', 'yellow'];\r\n  const [bgColorValue, setBgColorValue] = useState('#ffffff');\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDeckColorClick = (event: SyntheticEvent) => {\r\n    const target = event.target as HTMLDivElement;\r\n    dispatch(changeDeckColor(target.id));\r\n  };\r\n\r\n  const handleBgColorInput = (event: SyntheticEvent) => {\r\n    const target = event.target as HTMLInputElement;\r\n    dispatch(changeBgColor(target.value));\r\n    setBgColorValue(target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.controlsContainer}>\r\n      <h3>Control panel</h3>\r\n      <h5>Background color</h5>\r\n      <input type='color' id='bgColorInput' value={bgColorValue} onInput={handleBgColorInput} />\r\n      <h5>Deck print color</h5>\r\n      <div className={styles.colorsContainer}>\r\n        {colors.map((el) => (\r\n          <div\r\n            key={el}\r\n            style={{ backgroundColor: el }}\r\n            className={styles.colorItem}\r\n            onClick={handleDeckColorClick}\r\n            id={el}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { ObjectMap, useLoader } from '@react-three/fiber';\r\nimport skateModel from '../../assets/models/skate.glb';\r\nimport { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { colorState } from '../../store/slices/colorSlice';\r\n\r\nconst ROTATE_Y_90 = Math.PI * 0.5;\r\n\r\nexport const Skate = ({ deckColor }: colorState) => {\r\n  const [hovered, setHovered] = useState(false);\r\n  const skate = useLoader(GLTFLoader, skateModel) as GLTF & ObjectMap;\r\n  const model = useRef(skate.scene);\r\n\r\n  const newColor = new THREE.MeshPhongMaterial({\r\n    color: new THREE.Color(deckColor),\r\n    shininess: 10,\r\n  });\r\n\r\n  const deck = skate.nodes['Rear_Truck_HP_bushing2_Wood_0'] as THREE.Mesh;\r\n\r\n  useEffect(() => {\r\n    deck.material = newColor;\r\n  }, [deckColor]);\r\n\r\n  useEffect(() => {\r\n    if (hovered) {\r\n      document.body.style.cursor = 'pointer';\r\n    } else {\r\n      document.body.style.cursor = 'default';\r\n    }\r\n  }, [hovered]);\r\n\r\n  return (\r\n    <primitive\r\n      ref={model}\r\n      object={skate.scene}\r\n      scale={[1, 1, 1]}\r\n      rotation={[0, ROTATE_Y_90, 0]}\r\n      onPointerOver={() => setHovered(true)}\r\n      onPointerOut={() => setHovered(false)}\r\n    />\r\n  );\r\n};\r\n","import * as THREE from 'three';\r\nimport React, { useEffect } from 'react';\r\nimport { extend, Object3DNode, useThree } from '@react-three/fiber';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { Skate } from './Skate/Skate';\r\nimport { colorState } from '../store/slices/colorSlice';\r\n\r\nextend({ OrbitControls });\r\n\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      orbitControls: Object3DNode<OrbitControls, typeof OrbitControls>;\r\n    }\r\n  }\r\n}\r\n\r\nexport const Scene = ({ bgColor, deckColor }: colorState) => {\r\n  const target = new THREE.Vector3(0, 0, 0);\r\n  const {\r\n    scene,\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n\r\n  useEffect(() => {\r\n    camera.position.y = -60;\r\n    camera.lookAt(target);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scene.background = new THREE.Color(bgColor);\r\n  }, [bgColor]);\r\n\r\n  return (\r\n    <>\r\n      <orbitControls args={[camera, domElement]} target={target} maxDistance={100} minDistance={20} />\r\n      <hemisphereLight intensity={0.8} position={[0, 10, 0]} />\r\n      <directionalLight intensity={0.5} position={[0, -10, 0]} />\r\n      <directionalLight intensity={1} position={[0, 10, 0]} />\r\n      <Skate deckColor={deckColor} />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Controls } from './components/Controls/Controls';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport './App.css';\r\nimport { Scene } from './components/Scene';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from './store/store';\r\n\r\nexport const App = (): JSX.Element => {\r\n  const bgColor = useSelector((state: RootState) => state.colors.bgColor);\r\n  const deckColor = useSelector((state: RootState) => state.colors.deckColor);\r\n\r\n  return (\r\n    <>\r\n      <header className='header'>\r\n        <h2>Skateboard 3d configurator</h2>\r\n      </header>\r\n      <main className='mainContainer'>\r\n        <Controls />\r\n        <div className='canvasContainer'>\r\n          <Canvas>\r\n            <Scene bgColor={bgColor} deckColor={deckColor} />\r\n          </Canvas>\r\n        </div>\r\n      </main>\r\n      <footer className='footer'>\r\n        <div>\r\n          <a href='https://github.com/Vadosdavos'>@Vadosdavos</a>, 2022\r\n        </div>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport colorReducer from './slices/colorSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    colors: colorReducer,\r\n  },\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { Provider } from 'react-redux';\r\nimport { App } from './App';\r\nimport './index.css';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './store/store';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\r\nroot.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}