{"version":3,"sources":["components/ControlGroup/ControlGroup.module.css","app/App.module.css","components/CustomLoader/CustomLoader.module.css","components/Controls/Controls.module.css","assets/textures/tex1.jpg","assets/textures/tex2.jpg","assets/textures/tex3.jpg","assets/textures/tex4.jpg","assets/textures/tex5.jpg","assets/models/skate.glb","assets/textures/metalMap.png","assets/textures/normalMap.png","types/types.ts","store/slices/settingsSlice.ts","constants/constants.ts","components/ControlGroup/ControlGroup.tsx","components/Controls/Controls.tsx","components/Skate/Skate.tsx","components/Scene.tsx","components/CustomLoader/CustomLoader.tsx","app/App.tsx","reportWebVitals.js","store/store.ts","index.tsx"],"names":["module","exports","colorsContainer","texturesContainer","openBtn","openBtnActive","controlItem","closedContainer","header","mainTitle","mainContainer","footer","canvasContainer","tipBox","loaderContainer","loaderBody","pl","pl__ring","pl__worm1","pl__worm2","pl__worm3","worm1","worm2","worm3","controlsContainer","bgColorContainer","__webpack_require__","p","Target","settingsSlice","createSlice","name","initialState","bgColor","deckColor","wheelsColor","deckTexture","target","reducers","changeBgColor","state","action","payload","changeDeckColor","changeWheelsColor","changeDeckTexture","changeTarget","actions","TEXTURES","tex1","tex2","tex3","tex4","tex5","COLORS","ControlGroup","_ref","data","handleClick","title","isTextures","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","react_default","a","createElement","className","concat","styles","onClick","prev","map","el","key","style","backgroundImage","backgroundColor","id","slice","length","Controls","bgColorValue","setBgColorValue","dispatch","useDispatch","handleDeckColorClick","useCallback","event","handleWheelsColorClick","handleDeckTextureClick","texture","type","value","onInput","ControlGroup_ControlGroup","ROTATE_Y_90","Math","PI","Skate","skate","useLoader","GLTFLoader","skateModel","model","useRef","scene","threeTextures","TextureLoader","normalMap","normalMapTex","metalMap","metalMapTex","deck","nodes","wheels","newMaterial","THREE","metalnessMap","metalness","roughnessMap","roughness","useLayoutEffect","color","material","newWheelsColor","wrapS","wrapT","repeat","set","ref","object","scale","rotation","extend","OrbitControls","Scene","_useThree","useThree","camera","domElement","gl","useEffect","position","y","lookAt","background","Fragment","args","maxDistance","minDistance","intensity","Skate_Skate","CustomLoader","viewBox","width","height","xmlns","x1","y1","x2","y2","offset","stopColor","fill","strokeWidth","strokeLinecap","r","cx","cy","stroke","d","strokeDasharray","strokeDashoffset","visibility","App","useSelector","Controls_Controls","react","fallback","CustomLoader_CustomLoader","react_three_fiber_esm","Scene_Scene","settings","href","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","settingsReducer","ReactDOM","createRoot","document","getElementById","render","es","App_App"],"mappings":"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","file":"static/js/main.24b1c5a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorsContainer\":\"ControlGroup_colorsContainer__x-A1a\",\"texturesContainer\":\"ControlGroup_texturesContainer__2rcMH\",\"openBtn\":\"ControlGroup_openBtn__3zbzJ\",\"openBtnActive\":\"ControlGroup_openBtnActive__14o2j\",\"controlItem\":\"ControlGroup_controlItem__NCWB6\",\"closedContainer\":\"ControlGroup_closedContainer__yB5Ek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__HZUtd\",\"mainTitle\":\"App_mainTitle__2ZYsP\",\"mainContainer\":\"App_mainContainer__2baUB\",\"footer\":\"App_footer__3KBuv\",\"canvasContainer\":\"App_canvasContainer__3-xEG\",\"tipBox\":\"App_tipBox__2qCTX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderContainer\":\"CustomLoader_loaderContainer__1_U9Q\",\"loaderBody\":\"CustomLoader_loaderBody__3418p\",\"pl\":\"CustomLoader_pl__CRkjU\",\"pl__ring\":\"CustomLoader_pl__ring__1xPo3\",\"pl__worm1\":\"CustomLoader_pl__worm1__2d319\",\"pl__worm2\":\"CustomLoader_pl__worm2__3L1_x\",\"pl__worm3\":\"CustomLoader_pl__worm3__1blSr\",\"worm1\":\"CustomLoader_worm1__11O_s\",\"worm2\":\"CustomLoader_worm2__3FcX3\",\"worm3\":\"CustomLoader_worm3__36WWH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"Controls_controlsContainer__3STV4\",\"bgColorContainer\":\"Controls_bgColorContainer__QQdGi\"};","module.exports = __webpack_public_path__ + \"static/media/tex1.20a3ea1c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tex2.b317e4bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tex3.7a086e97.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tex4.5ac24cad.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tex5.aca09de5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/skate.72b3bd60.glb\";","module.exports = __webpack_public_path__ + \"static/media/metalMap.e79c7632.png\";","module.exports = __webpack_public_path__ + \"static/media/normalMap.293d327e.png\";","export enum Target {\n  deckColor = 'deckColor',\n  texture = 'texture',\n  bgColor = 'bgColor',\n  wheelsColor = 'wheelsColor',\n}","import { createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\n\nexport interface SettingsState {\n  bgColor: string,\n  deckColor: string,\n  wheelsColor: string,\n  deckTexture: string,\n  target: string\n}\n\nconst initialState: SettingsState = {\n  bgColor: 'white',\n  deckColor: '',\n  wheelsColor: '',\n  deckTexture: '',\n  target: 'deckColor'\n}\n\nexport const settingsSlice = createSlice({\n  name: 'color',\n  initialState,\n  reducers: {\n    changeBgColor: (state, action: PayloadAction<string>) => {\n      state.bgColor = action.payload\n    },\n    changeDeckColor: (state, action: PayloadAction<string>) => {\n      state.deckColor = action.payload\n    },\n    changeWheelsColor: (state, action: PayloadAction<string>) => {\n      state.wheelsColor = action.payload\n    },\n    changeDeckTexture: (state, action: PayloadAction<string>) => {\n      state.deckTexture = action.payload;\n    },\n    changeTarget: (state, action: PayloadAction<string>) => {\n      state.target = action.payload\n    },\n  },\n})\n\nexport const { changeBgColor, changeDeckColor, changeDeckTexture, changeTarget, changeWheelsColor } = settingsSlice.actions\n\nexport default settingsSlice.reducer","import tex1 from '../assets/textures/tex1.jpg';\nimport tex2 from '../assets/textures/tex2.jpg';\nimport tex3 from '../assets/textures/tex3.jpg';\nimport tex4 from '../assets/textures/tex4.jpg';\nimport tex5 from '../assets/textures/tex5.jpg';\n\nexport const TEXTURES = [tex1, tex2, tex3, tex4, tex5];\nexport const COLORS = [\n  '#808080',\n  '#c0c0c0',\n  'cornsilk',\n  '#ff00ff',\n  '#800080',\n  '#ff0000',\n  '#800000',\n  '#ffff00',\n  '#808000',\n  '#00ff00',\n  '#008000',\n  '#00ffff',\n  '#008080',\n  '#0000ff',\n  '#000080',\n];\nexport const TEX_NAME_START_INDEX = 14;\nexport const TEX_NAME_END_INDEX = 13;\n","import React, { SyntheticEvent, useState } from 'react';\nimport { TEX_NAME_END_INDEX, TEX_NAME_START_INDEX } from '../../constants/constants';\nimport styles from './ControlGroup.module.css';\n\ntype ControlGroupProps = {\n  data: string[];\n  title: string;\n  handleClick: (event: SyntheticEvent) => void;\n  isTextures: boolean;\n};\n\nexport const ControlGroup = ({ data, handleClick, title, isTextures }: ControlGroupProps): JSX.Element => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <li>\n      <h5>{title}</h5>\n      <button className={`${styles.openBtn} ${isOpen ? styles.openBtnActive : ''}`} onClick={() => setIsOpen((prev) => !prev)}>\n        &gt;\n      </button>\n      <ul\n        className={`${isTextures ? styles.texturesContainer : styles.colorsContainer} ${!isOpen ? styles.closedContainer : ''\n          }`}\n      >\n        {data.map((el) => (\n          <li\n            key={el}\n            style={isTextures ? { backgroundImage: `url(${el})` } : { backgroundColor: el }}\n            className={styles.controlItem}\n            onClick={handleClick}\n            id={isTextures ? el.slice(el.length - TEX_NAME_START_INDEX, el.length - TEX_NAME_END_INDEX) : el}\n          />\n        ))}\n      </ul>\n    </li>\n  );\n};\n","import React, { SyntheticEvent, useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  changeBgColor,\n  changeDeckColor,\n  changeDeckTexture,\n  changeTarget,\n  changeWheelsColor,\n} from '../../store/slices/settingsSlice';\nimport styles from './Controls.module.css';\nimport { COLORS, TEXTURES } from '../../constants/constants';\nimport { Target } from '../../types/types';\nimport { ControlGroup } from '../ControlGroup/ControlGroup';\n\nexport const Controls = (): JSX.Element => {\n  const [bgColorValue, setBgColorValue] = useState('#ffffff');\n  const dispatch = useDispatch();\n\n  const handleDeckColorClick = useCallback(\n    (event: SyntheticEvent): void => {\n      const target = event.target as HTMLDivElement;\n      dispatch(changeDeckColor(target.id));\n      dispatch(changeTarget(Target.deckColor));\n    },\n    [changeDeckColor, changeTarget]\n  );\n\n  const handleWheelsColorClick = useCallback(\n    (event: SyntheticEvent): void => {\n      const target = event.target as HTMLDivElement;\n      dispatch(changeWheelsColor(target.id));\n      dispatch(changeTarget(Target.wheelsColor));\n    },\n    [changeWheelsColor, changeTarget]\n  );\n\n  const handleDeckTextureClick = useCallback(\n    (event: SyntheticEvent): void => {\n      const target = event.target as HTMLDivElement;\n      dispatch(changeDeckTexture(target.id));\n      dispatch(changeTarget(Target.texture));\n    },\n    [changeDeckTexture, changeTarget]\n  );\n\n  const handleBgColorInput = (event: SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    dispatch(changeBgColor(target.value));\n    setBgColorValue(target.value);\n    dispatch(changeTarget(Target.bgColor));\n  };\n\n  return (\n    <ul className={styles.controlsContainer}>\n      <li>\n        <h5>Background color</h5>\n        <div className={styles.bgColorContainer}>\n          <input type='color' id='bgColorInput' value={bgColorValue} onInput={handleBgColorInput} />\n        </div>\n      </li>\n      <ControlGroup data={COLORS} title=\"Deck color\" handleClick={handleDeckColorClick} isTextures={false} />\n      <ControlGroup data={COLORS} title=\"Wheels color\" handleClick={handleWheelsColorClick} isTextures={false} />\n      <ControlGroup data={TEXTURES} title=\"Deck print\" handleClick={handleDeckTextureClick} isTextures />\n    </ul>\n  );\n};\n","import React, { useRef, useLayoutEffect } from 'react';\nimport * as THREE from 'three';\nimport { ObjectMap, useLoader } from '@react-three/fiber';\nimport skateModel from '../../assets/models/skate.glb';\nimport { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { TextureLoader } from 'three';\nimport { Target } from '../../types/types';\nimport { TEXTURES } from '../../constants/constants';\nimport metalMapTex from '../../assets/textures/metalMap.png';\nimport normalMapTex from '../../assets/textures/normalMap.png';\nimport { SettingsState } from \"../../store/slices/settingsSlice\";\n\nconst ROTATE_Y_90 = Math.PI * 0.5;\n\nexport const Skate = ({ state }: { state: SettingsState }): JSX.Element => {\n  const { deckColor, deckTexture, target, wheelsColor } = state;\n  const skate = useLoader(GLTFLoader, skateModel) as GLTF & ObjectMap;\n  const model = useRef(skate.scene);\n  const threeTextures = useLoader(TextureLoader, TEXTURES);\n  const normalMap = useLoader(TextureLoader, normalMapTex);\n  const metalMap = useLoader(TextureLoader, metalMapTex);\n\n  const deck = skate.nodes['Rear_Truck_HP_bushing2_Wood_0'] as THREE.Mesh;\n  const wheels = skate.nodes['Rear_Truck_HP_bushing2_Wheels_0'] as THREE.Mesh;\n\n  const newMaterial = new THREE.MeshStandardMaterial({\n    normalMap: normalMap,\n    metalnessMap: metalMap,\n    metalness: 1,\n    roughnessMap: metalMap,\n    roughness: 1,\n  });\n\n  useLayoutEffect(() => {\n    switch (target) {\n      case Target.deckColor:\n        newMaterial.color = new THREE.Color(deckColor);\n        deck.material = newMaterial;\n        break;\n\n      case Target.wheelsColor:\n        const newWheelsColor = new THREE.MeshStandardMaterial({\n          color: new THREE.Color(wheelsColor),\n        });\n        wheels.material = newWheelsColor;\n        break;\n\n      case Target.texture:\n        const texture = threeTextures[+deckTexture - 1];\n        texture.wrapS = THREE.RepeatWrapping;\n        texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.set(10, 10);\n        newMaterial.map = texture;\n        deck.material = newMaterial;\n        break;\n\n      default:\n        break;\n    }\n  }, [deckColor, deckTexture, target, wheelsColor]);\n\n  return <primitive ref={model} object={skate.scene} scale={[1, 1, 1]} rotation={[0, -ROTATE_Y_90, 0]} />;\n};\n","import * as THREE from 'three';\nimport React, { useEffect } from 'react';\nimport { extend, Object3DNode, useThree } from '@react-three/fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Skate } from './Skate/Skate';\nimport { SettingsState } from \"../store/slices/settingsSlice\";\n\nextend({ OrbitControls });\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      orbitControls: Object3DNode<OrbitControls, typeof OrbitControls>;\n    }\n  }\n}\n\nexport const Scene = ({ state }: { state: SettingsState }): JSX.Element => {\n  const { bgColor } = state;\n  const target = new THREE.Vector3(0, 0, 0);\n  const {\n    scene,\n    camera,\n    gl: { domElement },\n  } = useThree();\n\n  useEffect(() => {\n    camera.position.y = -60;\n    camera.lookAt(target);\n  }, []);\n\n  useEffect(() => {\n    scene.background = new THREE.Color(bgColor);\n  }, [bgColor]);\n\n  return (\n    <>\n      <orbitControls args={[camera, domElement]} target={target} maxDistance={100} minDistance={20} />\n      <ambientLight intensity={0.3} />\n      <pointLight intensity={0.7} position={[0, -30, 0]} />\n      <directionalLight intensity={0.5} position={[0, 10, 0]} />\n      <Skate state={state} />\n    </>\n  );\n};\n","import React from 'react';\nimport styles from './CustomLoader.module.css';\n\nexport const CustomLoader = (): JSX.Element => {\n  return (\n    <div className={styles.loaderContainer}>\n      <div className={styles.loaderBody}>\n        <svg\n          className={styles.pl}\n          viewBox='0 0 176 160'\n          width='176px'\n          height='160px'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <defs>\n            <linearGradient id='pl-grad' x1='0' y1='0' x2='0' y2='1'>\n              <stop offset='0%' stopColor='hsl(33,90%,55%)' />\n              <stop offset='30%' stopColor='hsl(33,90%,55%)' />\n              <stop offset='100%' stopColor='hsl(3,90%,55%)' />\n            </linearGradient>\n          </defs>\n          <g fill='none' strokeWidth='16' strokeLinecap='round'>\n            <circle className='pl__ring' r='56' cx='88' cy='96' stroke='hsla(0,10%,10%,0.1)' />\n            <path\n              className={styles.pl__worm1}\n              d='M144,96A56,56,0,0,1,32,96'\n              stroke='url(#pl-grad)'\n              strokeDasharray='43.98 307.87'\n            />\n            <path\n              className={styles.pl__worm2}\n              d='M32,136V96s-.275-25.725,14-40'\n              stroke='hsl(33,90%,55%)'\n              strokeDasharray='0 40 0 44'\n              strokeDashoffset='0.001'\n              visibility='hidden'\n            />\n            <path\n              className={styles.pl__worm3}\n              d='M144,136V96s.275-25.725-14-40'\n              stroke='hsl(33,90%,55%)'\n              strokeDasharray='0 40 0 44'\n              strokeDashoffset='0.001'\n              visibility='hidden'\n            />\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n};\n","import React, { Suspense } from 'react';\nimport { Controls } from '../components/Controls/Controls';\nimport { Canvas } from '@react-three/fiber';\nimport styles from './App.module.css';\nimport { Scene } from '../components/Scene';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store/store';\nimport { CustomLoader } from '../components/CustomLoader/CustomLoader';\n\nexport const App = (): JSX.Element => {\n  const state = useSelector((state: RootState) => state);\n\n  return (\n    <>\n      <header className={styles.header}>\n        <h2 className={styles.mainTitle}>Skateboard 3d configurator</h2>\n      </header>\n      <main className={styles.mainContainer}>\n        <Controls />\n        <section className={styles.canvasContainer}>\n          <Suspense fallback={<CustomLoader />}>\n            <Canvas>\n              <Scene state={state.settings} />\n            </Canvas>\n            <div className={styles.tipBox}>\n              <span>Scroll to zoom in</span>\n              <span>Click and drag to rotate</span>\n            </div>\n          </Suspense>\n        </section>\n      </main>\n      <footer className={styles.footer}>\n        <a href='https://github.com/Vadosdavos'>@Vadosdavos</a>, 2022\n      </footer>\n    </>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport settingsReducer from './slices/settingsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    settings: settingsReducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { App } from './app/App';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}